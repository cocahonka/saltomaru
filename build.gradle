plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'com.github.johnrengelman.shadow' version "$shadowJarVersion"
}

shadowJar {
    configurations = [project.configurations.compileClasspath]
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    archiveFileName = 'saltomaru.jar'
    destinationDirectory = file('../paper_server/plugins')
}

group = 'com.cocahonka'
version = '0.5.4'

build {
    dependsOn shadowJar
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "io.strikt:strikt-core:$striktCoreVersion"

    compileOnly "io.papermc.paper:paper-api:$paperApiVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"

    implementation "org.xerial:sqlite-jdbc:$sqliteJBDCVersion"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

test {
    useJUnitPlatform()
}
